"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UngroupedBatcher = exports.Batcher = void 0;
const aggregators = require("./aggregators");
const types_1 = require("./types");
/**
 * Base class for all batcher types.
 *
 * The batcher is responsible for storing the aggregators and aggregated
 * values received from updates from metrics in the meter. The stored values
 * will be sent to an exporter for exporting.
 */
class Batcher {
    constructor() {
        this._batchMap = new Map();
    }
    checkPointSet() {
        return Array.from(this._batchMap.values());
    }
}
exports.Batcher = Batcher;
/**
 * Batcher which retains all dimensions/labels. It accepts all records and
 * passes them for exporting.
 */
class UngroupedBatcher extends Batcher {
    aggregatorFor(metricDescriptor) {
        switch (metricDescriptor.metricKind) {
            case types_1.MetricKind.COUNTER:
            case types_1.MetricKind.UP_DOWN_COUNTER:
            case types_1.MetricKind.SUM_OBSERVER:
            case types_1.MetricKind.UP_DOWN_SUM_OBSERVER:
                return new aggregators.SumAggregator();
            case types_1.MetricKind.VALUE_RECORDER:
            case types_1.MetricKind.VALUE_OBSERVER:
                return new aggregators.MinMaxLastSumCountAggregator();
            default:
                return new aggregators.MinMaxLastSumCountAggregator();
        }
    }
    process(record) {
        const labels = Object.keys(record.labels)
            .map(k => `${k}=${record.labels[k]}`)
            .join(',');
        this._batchMap.set(record.descriptor.name + labels, record);
    }
}
exports.UngroupedBatcher = UngroupedBatcher;
//# sourceMappingURL=Batcher.js.map