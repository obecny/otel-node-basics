/// <reference types="node" />
import * as grpcModule from 'grpc';
import * as events from 'events';
import { PluginConfig } from '@opentelemetry/api';
export declare type grpc = typeof grpcModule;
export declare type IgnoreMatcher = string | RegExp | ((str: string) => boolean);
export declare type SendUnaryDataCallback = (error: grpcModule.ServiceError | null, value?: any, trailer?: grpcModule.Metadata, flags?: grpcModule.writeFlags) => void;
export interface GrpcPluginOptions extends PluginConfig {
    ignoreGrpcMethods?: IgnoreMatcher[];
}
interface GrpcStatus {
    code: number;
    details: string;
    metadata: grpcModule.Metadata;
}
export declare type ServerCall = typeof grpcModule.ServerUnaryCall | typeof grpcModule.ServerReadableStream | typeof grpcModule.ServerWritableStream | typeof grpcModule.ServerDuplexStream;
export declare type ServerCallWithMeta = ServerCall & {
    metadata: grpcModule.Metadata;
    status: GrpcStatus;
    request?: unknown;
} & events.EventEmitter;
export declare type GrpcClientFunc = typeof Function & {
    path: string;
    requestStream: boolean;
    responseStream: boolean;
};
export declare type GrpcInternalClientTypes = {
    makeClientConstructor: typeof grpcModule.makeGenericClientConstructor;
};
/**
 * Maps a name (key) representing a internal file module and its exports
 */
export interface ModuleNameToFilePath {
    client: string;
    [wildcard: string]: string;
}
/**
 * Maps a semver to a module:filepath Map
 */
export interface ModuleExportsMapping {
    [semver: string]: ModuleNameToFilePath;
}
export {};
//# sourceMappingURL=types.d.ts.map