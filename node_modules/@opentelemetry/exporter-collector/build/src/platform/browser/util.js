"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendWithXhr = exports.sendWithBeacon = void 0;
/**
 * Send metrics/spans using browser navigator.sendBeacon
 * @param body
 * @param onSuccess
 * @param onError
 */
function sendWithBeacon(body, url, logger, onSuccess, onError) {
    if (navigator.sendBeacon(url, body)) {
        logger.debug('sendBeacon - can send', body);
        onSuccess();
    }
    else {
        logger.error('sendBeacon - cannot send', body);
        onError({});
    }
}
exports.sendWithBeacon = sendWithBeacon;
/**
 * function to send metrics/spans using browser XMLHttpRequest
 *     used when navigator.sendBeacon is not available
 * @param body
 * @param onSuccess
 * @param onError
 */
function sendWithXhr(body, url, headers, logger, onSuccess, onError) {
    const xhr = new XMLHttpRequest();
    xhr.open('POST', url);
    xhr.setRequestHeader('Accept', 'application/json');
    xhr.setRequestHeader('Content-Type', 'application/json');
    Object.entries(headers).forEach(([k, v]) => {
        xhr.setRequestHeader(k, v);
    });
    xhr.send(body);
    xhr.onreadystatechange = () => {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status >= 200 && xhr.status <= 299) {
                logger.debug('xhr success', body);
                onSuccess();
            }
            else {
                logger.error('body', body);
                logger.error('xhr error', xhr);
                onError({
                    code: xhr.status,
                    message: xhr.responseText,
                });
            }
        }
    };
}
exports.sendWithXhr = sendWithXhr;
//# sourceMappingURL=util.js.map