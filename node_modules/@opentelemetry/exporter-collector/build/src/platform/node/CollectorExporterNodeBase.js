"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectorExporterNodeBase = void 0;
const CollectorExporterBase_1 = require("../../CollectorExporterBase");
const collectorTypes = require("../../types");
const util_1 = require("../../util");
const util_2 = require("./util");
/**
 * Collector Metric Exporter abstract base class
 */
class CollectorExporterNodeBase extends CollectorExporterBase_1.CollectorExporterBase {
    constructor(config = {}) {
        super(config);
        this.DEFAULT_HEADERS = {
            [collectorTypes.OT_REQUEST_HEADER]: '1',
        };
        if (config.metadata) {
            this.logger.warn('Metadata cannot be set when using http');
        }
        this.headers =
            util_1.parseHeaders(config.headers, this.logger) || this.DEFAULT_HEADERS;
    }
    onInit(config) {
        this._isShutdown = false;
    }
    send(objects, onSuccess, onError) {
        if (this._isShutdown) {
            this.logger.debug('Shutdown already started. Cannot send objects');
            return;
        }
        const serviceRequest = this.convert(objects);
        util_2.sendWithHttp(this, JSON.stringify(serviceRequest), 'application/json', onSuccess, onError);
    }
    onShutdown() { }
}
exports.CollectorExporterNodeBase = CollectorExporterNodeBase;
//# sourceMappingURL=CollectorExporterNodeBase.js.map