import { MetricRecord } from '@opentelemetry/metrics';
import { opentelemetryProto, CollectorExporterConfigBase } from './types';
import * as api from '@opentelemetry/api';
import * as core from '@opentelemetry/core';
import { Resource } from '@opentelemetry/resources';
import { CollectorExporterBase } from './CollectorExporterBase';
/**
 * Converts labels
 * @param labels
 */
export declare function toCollectorLabels(labels: api.Labels): opentelemetryProto.common.v1.StringKeyValue[];
/**
 * Given a MetricDescriptor, return its type in a compatible format with the collector
 * @param descriptor
 */
export declare function toCollectorType(metric: MetricRecord): opentelemetryProto.metrics.v1.MetricDescriptorType;
/**
 * Given a MetricDescriptor, return its temporality in a compatible format with the collector
 * @param descriptor
 */
export declare function toCollectorTemporality(metric: MetricRecord): opentelemetryProto.metrics.v1.MetricDescriptorTemporality;
/**
 * Given a MetricRecord, return the Collector compatible type of MetricDescriptor
 * @param metric
 */
export declare function toCollectorMetricDescriptor(metric: MetricRecord): opentelemetryProto.metrics.v1.MetricDescriptor;
/**
 * Returns an Int64Point or DoublePoint to the collector
 * @param metric
 * @param startTime
 */
export declare function toSingularPoint(metric: MetricRecord, startTime: number): {
    labels: opentelemetryProto.common.v1.StringKeyValue[];
    startTimeUnixNano: number;
    timeUnixNano: number;
    value: number;
};
/**
 * Returns a HistogramPoint to the collector
 * @param metric
 * @param startTime
 */
export declare function toHistogramPoint(metric: MetricRecord, startTime: number): opentelemetryProto.metrics.v1.HistogramDataPoint;
/**
 * Returns a SummaryPoint to the collector
 * @param metric
 * @param startTime
 */
export declare function toSummaryPoint(metric: MetricRecord, startTime: number): opentelemetryProto.metrics.v1.SummaryDataPoint;
/**
 * Converts a metric to be compatible with the collector
 * @param metric
 * @param startTime start time in nanoseconds
 */
export declare function toCollectorMetric(metric: MetricRecord, startTime: number): opentelemetryProto.metrics.v1.Metric;
/**
 * Prepares metric service request to be sent to collector
 * @param metrics metrics
 * @param startTime start time of the metric in nanoseconds
 * @param collectorMetricExporterBase
 */
export declare function toCollectorExportMetricServiceRequest<T extends CollectorExporterConfigBase>(metrics: MetricRecord[], startTime: number, collectorExporterBase: CollectorExporterBase<T, MetricRecord, opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest>): opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest;
/**
 * Takes an array of metrics and groups them by resource and instrumentation
 * library
 * @param metrics metrics
 */
export declare function groupMetricsByResourceAndLibrary(metrics: MetricRecord[]): Map<Resource, Map<core.InstrumentationLibrary, MetricRecord[]>>;
//# sourceMappingURL=transformMetrics.d.ts.map