"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.serverStreamAndBidiHandler = void 0;
const api_1 = require("@opentelemetry/api");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const utils_1 = require("../utils");
/**
 * Handle patching for serverStream and Bidi type server handlers
 */
function serverStreamAndBidiHandler(plugin, span, call, original) {
    let spanEnded = false;
    const endSpan = () => {
        if (!spanEnded) {
            spanEnded = true;
            span.end();
        }
    };
    plugin.tracer.bind(call);
    call.on('finish', () => {
        // @grpc/js does not expose a way to check if this call also emitted an error,
        // e.g. call.status.code !== 0
        if (call[utils_1.CALL_SPAN_ENDED]) {
            return;
        }
        // Set the "grpc call had an error" flag
        call[utils_1.CALL_SPAN_ENDED] = true;
        span.setStatus({
            code: api_1.CanonicalCode.OK,
        });
        span.setAttribute(semantic_conventions_1.RpcAttribute.GRPC_STATUS_CODE, api_1.CanonicalCode.OK.toString());
        endSpan();
    });
    call.on('error', (err) => {
        if (call[utils_1.CALL_SPAN_ENDED]) {
            return;
        }
        // Set the "grpc call had an error" flag
        call[utils_1.CALL_SPAN_ENDED] = true;
        span.setStatus({
            code: utils_1.grpcStatusCodeToCanonicalCode(err.code),
            message: err.message,
        });
        span.setAttributes({
            [semantic_conventions_1.RpcAttribute.GRPC_ERROR_NAME]: err.name,
            [semantic_conventions_1.RpcAttribute.GRPC_ERROR_MESSAGE]: err.message,
        });
        endSpan();
    });
    // Types of parameters 'call' and 'call' are incompatible.
    return original.call({}, call);
}
exports.serverStreamAndBidiHandler = serverStreamAndBidiHandler;
//# sourceMappingURL=serverStreamAndBidi.js.map