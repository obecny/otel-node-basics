"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.GrpcJsPlugin = void 0;
const core_1 = require("@opentelemetry/core");
const shimmer = require("shimmer");
const client_1 = require("./client");
const server_1 = require("./server");
const version_1 = require("./version");
/**
 * @grpc/grpc-js gRPC instrumentation plugin for Opentelemetry
 * https://www.npmjs.com/package/@grpc/grpc-js
 */
class GrpcJsPlugin extends core_1.BasePlugin {
    constructor(moduleName) {
        super('@opentelemetry/plugin-grpc-js', version_1.VERSION);
        this.moduleName = moduleName;
        this.supportedVersions = ['1.*'];
    }
    /**
     * @internal
     * Public reference to the protected BasePlugin `_tracer` instance to be used by this
     * plugin's external helper functions
     */
    get tracer() {
        return this._tracer;
    }
    /**
     * @internal
     * Public reference to the protected BasePlugin `_logger` instance to be used by this
     * plugin's external helper functions
     */
    get logger() {
        return this._logger;
    }
    patch() {
        // Patch Server methods
        shimmer.wrap(this._moduleExports.Server.prototype, 'register', server_1.patchServer.call(this));
        // Patch Client methods
        shimmer.wrap(this._moduleExports, 'makeClientConstructor', client_1.patchClient.call(this));
        shimmer.wrap(this._moduleExports, 'makeGenericClientConstructor', client_1.patchClient.call(this));
        shimmer.wrap(this._moduleExports, 'loadPackageDefinition', client_1.patchLoadPackageDefinition.call(this));
        return this._moduleExports;
    }
    unpatch() {
        this._logger.debug('removing patch to %s@%s', this.moduleName, this.version);
        // Unpatch server
        shimmer.unwrap(this._moduleExports.Server.prototype, 'register');
        // Unpatch client
        shimmer.unwrap(this._moduleExports, 'makeClientConstructor');
        shimmer.unwrap(this._moduleExports, 'makeGenericClientConstructor');
        shimmer.unwrap(this._moduleExports, 'loadPackageDefinition');
    }
}
exports.GrpcJsPlugin = GrpcJsPlugin;
GrpcJsPlugin.component = '@grpc/grpc-js';
exports.plugin = new GrpcJsPlugin(GrpcJsPlugin.component);
//# sourceMappingURL=grpcJs.js.map