import { CanonicalCode, Status } from '@opentelemetry/api';
import type * as grpcTypes from '@grpc/grpc-js';
import { IgnoreMatcher } from './types';
/**
 * Symbol to include on grpc call if it has already emitted an error event.
 * grpc events that emit 'error' will also emit 'finish' and so only the
 * error event should be processed.
 */
export declare const CALL_SPAN_ENDED: unique symbol;
/**
 * Convert a grpc status code to an opentelemetry Canonical code. For now, the enums are exactly the same
 * @param status
 */
export declare const grpcStatusCodeToCanonicalCode: (status?: grpcTypes.status | undefined) => CanonicalCode;
/**
 * Convert grpc status code to an opentelemetry Status object.
 * @param status
 */
export declare const grpcStatusCodeToSpanStatus: (status: number) => Status;
/**
 * Returns true if the metadata contains
 * the opentelemetry outgoing request header.
 */
export declare const containsOtelMetadata: (metadata: grpcTypes.Metadata) => boolean;
/**
 * Returns true if the current plugin configuration
 * ignores the given method.
 * @param methodName the name of the method
 * @param ignoredMethods a list of matching patterns
 * @param onException an error handler for matching exceptions
 */
export declare const methodIsIgnored: (methodName: string, ignoredMethods?: IgnoreMatcher[] | undefined) => boolean;
//# sourceMappingURL=utils.d.ts.map